create table
  items (  -- Replace the "items" table with your own table name.
    id bigint generated by default as identity primary key,
    url text not null unique,
    title text not null,
    brief text,
    tsv tsvector generated always as (
       setweight(to_tsvector('english', coalesce(title,'')), 'A') ||
        setweight(to_tsvector('english', coalesce(brief,'')), 'B')
     ) stored,
    doc_embedding vector(512),
    logo text,
    visitstotalcount bigint,
    bouncerate float,
    pagespervisit float,
    visitsavgdurationformatted text,
    created_at timestamp with time zone default timezone ('utc'::text, now()) not null
  );

alter table
  items enable row level security;

create policy
  "Enable public read access" on items for
select
  using (true);

create or replace function match_items(
    query_embedding vector(512),
    match_threshold float,
    match_count int
)
returns table (
    id bigint,
    url text,
    title text,
    brief text,
    logo text,
    visitstotalcount bigint,
    bouncerate float,
    pagespervisit float,
    visitsavgdurationformatted text,
    similarity float
)
language plpgsql
as $$
begin
return query
  select
    items.id,
    items.url,
    items.title,
    items.brief,
    items.logo,
    items.visitstotalcount,
    items.bouncerate,
    items.pagespervisit,
    items.visitsavgdurationformatted,
    1 - (items.doc_embedding <=> query_embedding) as similarity
  from items
  where
  1 - (items.doc_embedding <=> query_embedding) > match_threshold
  order by items.doc_embedding <=> query_embedding
  limit match_count;
end;
$$;

create or replace function fts_match_items_ranked(
    query_string text,
    match_count int
)
returns table (
    id bigint,
    url text,
    title text,
    brief text,
    logo text,
    visitstotalcount bigint,
    bouncerate float,
    pagespervisit float,
    visitsavgdurationformatted text,
    rank float
)
language plpgsql
as $$
begin
return query
  select
    items.id,
    items.url,
    items.title,
    items.brief,
    items.logo,
    items.visitstotalcount,
    items.bouncerate,
    items.pagespervisit,
    items.visitsavgdurationformatted,
    ts_rank_cd(items.tsv, to_tsquery(query_string)) as rank
  from
    items
  where
    items.tsv @@ to_tsquery(query_string)
  order by
    rank DESC
  limit
    match_count;
end;
$$;